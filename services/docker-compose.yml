version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: afriverse
      POSTGRES_USER: afri
      POSTGRES_PASSWORD: afri_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U afri -d afriverse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Job Queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build: ./services/backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://afri:afri_pass@postgres:5432/afriverse
      - REDIS_URL=redis://redis:6379
      - PINATA_JWT=${PINATA_JWT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WEB3_PROVIDER=${WEB3_PROVIDER}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - PRIVATE_KEY=${PRIVATE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/backend:/app
      - /app/node_modules
    develop:
      watch:
        - action: sync
          path: ./services/backend
          target: /app
        - action: rebuild
          path: ./services/backend/package.json

  # Agentverse Agents
  agentverse:
    build: ./services/agentverse
    environment:
      - BACKEND_URL=http://backend:4000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - backend
      - redis
    volumes:
      - ./services/agentverse:/app
    develop:
      watch:
        - action: sync
          path: ./services/agentverse
          target: /app

  # MeTTa Server (if running locally)
  metta:
    image: metta-language/server:latest
    ports:
      - "8080:8080"
    environment:
      - METTA_PORT=8080
    volumes:
      - metta_data:/app/data

  # IPFS Node (optional - using Pinata primarily)
  ipfs:
    image: ipfs/kubo:latest
    ports:
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs

volumes:
  postgres_data:
  redis_data:
  metta_data:
  ipfs_data:

networks:
  default:
    name: afriverse-network